ORIGINAL ASSIGNMENT:
Agents (10%)
Deliverables due Thu Apr 10th 8:00am
Demo and presentation in class on Thu Apr 10th
Part 1 - Functions as Tools

Build a tool calling Agent using LlamaIndex that consists of at least 3 python functions or methods as tools. You can, for example, create a data structure and operations on the data structure (like a tree). Or, you can pick a Python Library, like os or shutils and expose methods as operations. Show how the Agent can use the tools to solve a problem or perform a task with the tools.
Part 2 - MCP

Pick one or more MCP Servers that to build an Agent that can interact with a more sophisticated tool, like the MCP Playwright tool. See the following page for a list of possible MCP Servers:

https://github.com/modelcontextprotocol/servers
Part 3 - Build a Useful Agent or Multi-Agent System

Combining what you learned in Part 1 and Part 2, pick a more ambitious problem to solve. See how far you can get with your Agent.

Another option to build out a multi-agent system.

Be creative.

CREATIVE IMPLEMENTATION IDEA:
Develop a multi-agent system where one agent gathers and processes data from web sources using MCP Playwright, another agent summarizes the information with custom Python functions (e.g., text extraction, keyword analysis, and summarization), and a final agent compiles the summarized content into a dynamic presentation. The system leverages LlamaIndex to connect these tools seamlessly, enabling the agents to collaborate and produce a comprehensive, automated research report with visual slides and an audio narration.

WHY THIS IS INTERESTING:
This approach combines multiple advanced components—web automation, data processing, and presentation generation—demonstrating a sophisticated, end-to-end AI workflow. It showcases how agents can work together to solve complex tasks, making it a compelling example of multi-agent systems in action, with practical applications like automated research assistants or educational content creators.
